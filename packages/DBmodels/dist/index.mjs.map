{"version":3,"sources":["../src/Driver.model.ts","../src/User.model.ts","../src/Workspace.model.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport mongoose from \"mongoose\";\r\n\r\nexport interface IDriver extends mongoose.Document{\r\n    _id: mongoose.Types.ObjectId;\r\n    firstName: string;\r\n    lastName: string;\r\n    username: string;\r\n    password: string;\r\n    lastUsedWorkspaceId: string;\r\n}\r\n\r\n\r\nconst DriverSchema = new mongoose.Schema<IDriver>({\r\n    _id: mongoose.Types.ObjectId,\r\n    firstName: String,\r\n    lastName: String,\r\n    username: String,\r\n    password: String,\r\n    lastUsedWorkspaceId: String\r\n})\r\n\r\n// const DriverModel = mongoose.model(\"drivers\", DriverSchema);\r\n// export default DriverModel;\r\n\r\nexport default (mongoose.models.Driver as mongoose.Model<IDriver>) || mongoose.model<IDriver>('Driver', DriverSchema)","/* eslint-disable prettier/prettier */\r\nimport mongoose from \"mongoose\"\r\n\r\nexport interface IUser{\r\n    _id: mongoose.Types.ObjectId\r\n    accType: string;\r\n    provider_id: string;\r\n    userName: string;\r\n    userNameWithTag: string;\r\n    email: string;\r\n    password: string;\r\n    lastUsedWorkspaceId: string;\r\n}\r\n\r\nconst UserSchema = new mongoose.Schema<IUser>({\r\n    _id: mongoose.Types.ObjectId,\r\n    accType: String,\r\n    provider_id: String,\r\n    userName: String,\r\n    userNameWithTag: String,\r\n    email: String,\r\n    password: String,\r\n    lastUsedWorkspaceId: String,\r\n    })\r\n\r\n//const UserModel = mongoose.model(\"users\", UserSchema) //the first paramater is the name of the collection into which it will be placed on the DB\r\n\r\nexport default (mongoose.models.User as mongoose.Model<IUser>) || mongoose.model<IUser>('User', UserSchema)\r\n\r\n\r\n// export default UserModel;","import { z } from \"zod\";\r\nimport mongoose from \"mongoose\";\r\n\r\nexport interface IMember{\r\n    _id: mongoose.Types.ObjectId;\r\n    userId: mongoose.Types.ObjectId;\r\n    role: string\r\n    lastUsedVehicleId: string;\r\n    lastUsedFuelPrice: number;\r\n}\r\n\r\nexport type IAddressBookEntry = {\r\n    _id: mongoose.Types.ObjectId;\r\n    physicalAddress: string;\r\n    addressDescription: string;\r\n}\r\n\r\nexport interface IVehicleListEntry{\r\n    _id: mongoose.Types.ObjectId;\r\n    vehicleDescription: string;\r\n    vehicleLicencePlate: string;\r\n    litersPer100km: number;\r\n    additionalCost: number;\r\n    additionalCostType: number; // 1 = R/hr, 2 = R/100km\r\n    vehicleClass: string;\r\n}\r\n\r\nexport interface IDrivers{\r\n    _id: mongoose.Types.ObjectId;\r\n    driverId: mongoose.Types.ObjectId;\r\n    accepted: boolean;\r\n}\r\n\r\n//TODO rename to drivable leg or driver leg, leg is not specific enough\r\nexport const Leg_ZodSchema = z.object({\r\n    givenAddress: z.string(),\r\n    fullAddressStr: z.string(),\r\n    legDetails: z.object({name: z.string(), value: z.string()}).array(),\r\n    avoidTolls: z.boolean(),\r\n    legStatus: z.number(),\r\n})\r\nexport type TLeg = z.infer<typeof Leg_ZodSchema> //infer type to be used in client\r\n\r\nexport interface IDrivableTrip {\r\n    _id: mongoose.Types.ObjectId;\r\n    tripName: string;\r\n    num: number;\r\n    date: string;\r\n    notes: string;\r\n    assignedDriverId: mongoose.Types.ObjectId;\r\n    legs: z.infer<typeof Leg_ZodSchema>[];\r\n    tripStatus: number;\r\n}\r\n\r\nexport interface IWorkspace extends mongoose.Document {\r\n    _id: mongoose.Types.ObjectId;\r\n    workspaceName: string;\r\n    descriptionPurpose: string;\r\n    members: IMember[];\r\n    tokens: number;\r\n    addressBook: IAddressBookEntry[];\r\n    vehicleList: IVehicleListEntry[];\r\n    drivers: IDrivers[];\r\n    tripNr: number;\r\n    drivableTrips: IDrivableTrip[];\r\n}\r\n\r\n\r\n\r\nconst WorkspaceSchema = new mongoose.Schema<IWorkspace>({\r\n    _id: mongoose.Types.ObjectId,\r\n    workspaceName: String,\r\n    descriptionPurpose: {type: String, default: \"\"},\r\n    members: {type: [{_id: mongoose.Types.ObjectId, userId: mongoose.Types.ObjectId, role: String, lastUsedVehicleId: String, lastUsedFuelPrice: Number}], default: []},\r\n    tokens: Number,\r\n    addressBook: { type: [{_id: mongoose.Types.ObjectId, physicalAddress: String, addressDescription: String}], default: []},\r\n    vehicleList: { type: [{_id: mongoose.Types.ObjectId, vehicleDescription: String, vehicleLicencePlate: String, litersPer100km: Number, additionalCost: Number, additionalCostType: Number, vehicleClass: String }], default: []},\r\n    drivers: {type: [{_id: mongoose.Types.ObjectId, driverId: mongoose.Types.ObjectId, accepted: Boolean}], default: []},\r\n    tripNr: {type: Number, default: 1},\r\n    drivableTrips: {\r\n        type: [{\r\n            _id: mongoose.Types.ObjectId, \r\n            assignedDriverId: mongoose.Types.ObjectId, \r\n            tripName: String,\r\n            num: Number,\r\n            date: String,\r\n            notes: String,\r\n            tripStatus: {type: Number, default: 0},\r\n            legs: [{\r\n                givenAddress: String,\r\n                fullAddressStr: String,\r\n                legDetails: {type: [{name: String, value: String}], default: []},\r\n                avoidTolls: Boolean,\r\n                legStatus: {type: Number, default: 0}\r\n            }]\r\n        }]\r\n        ,default: []\r\n    }\r\n})\r\n\r\n// const WorkspaceModel = mongoose.model(\"workspaces\", WorkspaceSchema)\r\n// export default WorkspaceModel;\r\n\r\nexport default (mongoose.models.Workspace as mongoose.Model<IWorkspace>) || mongoose.model<IWorkspace>('Workspace', WorkspaceSchema)"],"mappings":";AACA,OAAO,cAAc;AAYrB,IAAM,eAAe,IAAI,SAAS,OAAgB;AAAA,EAC9C,KAAK,SAAS,MAAM;AAAA,EACpB,WAAW;AAAA,EACX,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,qBAAqB;AACzB,CAAC;AAKD,IAAO,uBAAS,SAAS,OAAO,UAAsC,SAAS,MAAe,UAAU,YAAY;;;ACxBpH,OAAOA,eAAc;AAarB,IAAM,aAAa,IAAIA,UAAS,OAAc;AAAA,EAC1C,KAAKA,UAAS,MAAM;AAAA,EACpB,SAAS;AAAA,EACT,aAAa;AAAA,EACb,UAAU;AAAA,EACV,iBAAiB;AAAA,EACjB,OAAO;AAAA,EACP,UAAU;AAAA,EACV,qBAAqB;AACrB,CAAC;AAIL,IAAO,qBAASA,UAAS,OAAO,QAAkCA,UAAS,MAAa,QAAQ,UAAU;;;AC3B1G,SAAS,SAAS;AAClB,OAAOC,eAAc;AAiCd,IAAM,gBAAgB,EAAE,OAAO;AAAA,EAClC,cAAc,EAAE,OAAO;AAAA,EACvB,gBAAgB,EAAE,OAAO;AAAA,EACzB,YAAY,EAAE,OAAO,EAAC,MAAM,EAAE,OAAO,GAAG,OAAO,EAAE,OAAO,EAAC,CAAC,EAAE,MAAM;AAAA,EAClE,YAAY,EAAE,QAAQ;AAAA,EACtB,WAAW,EAAE,OAAO;AACxB,CAAC;AA6BD,IAAM,kBAAkB,IAAIA,UAAS,OAAmB;AAAA,EACpD,KAAKA,UAAS,MAAM;AAAA,EACpB,eAAe;AAAA,EACf,oBAAoB,EAAC,MAAM,QAAQ,SAAS,GAAE;AAAA,EAC9C,SAAS,EAAC,MAAM,CAAC,EAAC,KAAKA,UAAS,MAAM,UAAU,QAAQA,UAAS,MAAM,UAAU,MAAM,QAAQ,mBAAmB,QAAQ,mBAAmB,OAAM,CAAC,GAAG,SAAS,CAAC,EAAC;AAAA,EAClK,QAAQ;AAAA,EACR,aAAa,EAAE,MAAM,CAAC,EAAC,KAAKA,UAAS,MAAM,UAAU,iBAAiB,QAAQ,oBAAoB,OAAM,CAAC,GAAG,SAAS,CAAC,EAAC;AAAA,EACvH,aAAa,EAAE,MAAM,CAAC,EAAC,KAAKA,UAAS,MAAM,UAAU,oBAAoB,QAAQ,qBAAqB,QAAQ,gBAAgB,QAAQ,gBAAgB,QAAQ,oBAAoB,QAAQ,cAAc,OAAO,CAAC,GAAG,SAAS,CAAC,EAAC;AAAA,EAC9N,SAAS,EAAC,MAAM,CAAC,EAAC,KAAKA,UAAS,MAAM,UAAU,UAAUA,UAAS,MAAM,UAAU,UAAU,QAAO,CAAC,GAAG,SAAS,CAAC,EAAC;AAAA,EACnH,QAAQ,EAAC,MAAM,QAAQ,SAAS,EAAC;AAAA,EACjC,eAAe;AAAA,IACX,MAAM,CAAC;AAAA,MACH,KAAKA,UAAS,MAAM;AAAA,MACpB,kBAAkBA,UAAS,MAAM;AAAA,MACjC,UAAU;AAAA,MACV,KAAK;AAAA,MACL,MAAM;AAAA,MACN,OAAO;AAAA,MACP,YAAY,EAAC,MAAM,QAAQ,SAAS,EAAC;AAAA,MACrC,MAAM,CAAC;AAAA,QACH,cAAc;AAAA,QACd,gBAAgB;AAAA,QAChB,YAAY,EAAC,MAAM,CAAC,EAAC,MAAM,QAAQ,OAAO,OAAM,CAAC,GAAG,SAAS,CAAC,EAAC;AAAA,QAC/D,YAAY;AAAA,QACZ,WAAW,EAAC,MAAM,QAAQ,SAAS,EAAC;AAAA,MACxC,CAAC;AAAA,IACL,CAAC;AAAA,IACA,SAAS,CAAC;AAAA,EACf;AACJ,CAAC;AAKD,IAAO,0BAASA,UAAS,OAAO,aAA4CA,UAAS,MAAkB,aAAa,eAAe;","names":["mongoose","mongoose"]}